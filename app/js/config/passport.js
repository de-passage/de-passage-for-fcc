// Generated by CoffeeScript 1.9.3
(function() {
  var LocalStrategy, ObjectId, passport;

  passport = require("passport");

  ObjectId = require("mongodb").ObjectId;

  LocalStrategy = require("passport-local").Strategy;

  module.exports = function(User) {
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return User.findOne({
        _id: ObjectId(id)
      }, function(err, user) {
        if (err) {
          return done(err);
        } else {
          return done(null, user);
        }
      });
    });
    passport.use("local-login", new LocalStrategy({
      usernameField: 'email',
      passReqToCallback: true
    }, function(req, email, password, done) {
      return User.findOne({
        email: email
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!(user && user.verifyPassword(password))) {
          return done(null, false, req.flash("loginMessage", "The email address or password is incorrect"));
        }
        return done(null, user);
      });
    }));
    passport.use("local-signup", new LocalStrategy({
      usernameField: 'email',
      passReqToCallback: true
    }, function(req, email, password, done) {
      return User.findOne({
        $or: [
          {
            email: email
          }, {
            username: req.body.username
          }
        ]
      }, function(err, user) {
        var newUser;
        if (err) {
          return done(err);
        }
        if (user) {
          return done(null, false, req.flash('signupMessage', "This email adress is already taken"));
        }
        newUser = new User(req.body.username, email, {});
        newUser.setPassword(password);
        return newUser.save(done);
      });
    }));
    return passport;
  };

}).call(this);
