// Generated by CoffeeScript 1.9.3
(function() {
  var google_api_key, https, searchImages;

  https = require('https');

  google_api_key = process.env.GOOGLE_API_KEY;

  searchImages = function(searchparams, offset, callback) {
    return https.get("https://www.googleapis.com/customsearch/v1?key=" + google_api_key + "&cx=013364742045618430023:l_tcw48e2pw&q=" + (encodeURIComponent(searchparams)) + "&searchType=image&start=" + offset, function(res) {
      var rawData, statusCode;
      statusCode = res.statusCode;
      if (statusCode !== 200) {
        return callback({
          status: statusCode,
          msg: "Request failed",
          response: res
        });
      } else {
        rawData = "";
        res.on("data", (function(_this) {
          return function(chunks) {
            return rawData += chunks;
          };
        })(this));
        return res.on("end", (function(_this) {
          return function() {
            var e, parsedData;
            try {
              parsedData = JSON.parse(rawData);
              return callback(null, parsedData);
            } catch (_error) {
              e = _error;
              return callback(e);
            }
          };
        })(this));
      }
    });
  };

  module.exports = function(db) {
    return {
      search: function(req, res) {
        var offset, search;
        search = req.params.search;
        offset = req.query.offset;
        if (offset == null) {
          offset = 0;
        }
        offset = offset * 10 + 1;
        db.collection("imgsearch").insert({
          search: search,
          date: Date.now()
        });
        return searchImages(search, offset, function(err, result) {
          var img, searchResult;
          if (err) {
            throw err;
          }
          searchResult = (function() {
            var i, len, ref, results;
            ref = result.items;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              img = ref[i];
              results.push({
                url: img.link,
                snippet: img.snippet,
                context: img.image.contextLink,
                thumbnail: img.image.thumbnailLink
              });
            }
            return results;
          })();
          return res.json(searchResult);
        });
      },
      latest: function(req, res) {
        return db.collection("imgsearch").find({}, {
          sort: [["date", 'descending']]
        }).limit(10).toArray(function(err, result) {
          var queryResult, r;
          if (err) {
            throw err;
          }
          queryResult = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = result.length; i < len; i++) {
              r = result[i];
              results.push({
                search: r.search,
                date: r.date,
                dateStr: (new Date(r.date)).toString()
              });
            }
            return results;
          })();
          return res.json(queryResult);
        });
      }
    };
  };

}).call(this);
