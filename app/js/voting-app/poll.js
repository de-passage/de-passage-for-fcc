// Generated by CoffeeScript 1.9.3
(function() {
  var instanciatePoll;

  instanciatePoll = function(db, ObjectId) {
    var Poll;
    return Poll = (function() {
      function Poll(user1, name1, description, options) {
        var i, len, option;
        this.user = user1;
        this.name = name1;
        this.description = description;
        if (this.user == null) {
          throw "Not owner specified";
        }
        if (this.name == null) {
          throw "Not name specified";
        }
        if (this.description == null) {
          this.description = "";
        }
        this.options = {};
        this.voters = {};
        if (Array.isArray(options)) {
          for (i = 0, len = options.length; i < len; i++) {
            option = options[i];
            this.addOption(option, this.user);
          }
        } else if (options != null) {
          this.addOption(options, this.user);
        }
      }

      Poll.prototype.save = function(callback) {
        return db.save(this.serialize(), (function(_this) {
          return function(err, obj) {
            if (callback != null) {
              if (err) {
                return callback(err);
              }
              _this.id = obj._id;
              return callback(null, _this);
            } else {
              if (err) {
                throw err;
              }
              return _this.id = obj._id;
            }
          };
        })(this));
      };

      Poll.prototype.addOption = function(option, user) {
        var name, newOption;
        name = option.description.trim();
        if (this.options[name]) {
          throw "An option with the name '" + name + "' already exists";
        }
        newOption = {
          user: user,
          count: option.count || 0,
          color: option.color || "#CCCCCC",
          border: option.border || "#444444"
        };
        return this.options[name] = newOption;
      };

      Poll.prototype.removeOption = function(option) {
        return delete this.options[option];
      };

      Poll.prototype.vote = function(option, username) {
        if (this.options[option] == null) {
          throw "Option '" + option + "' does not exist";
        }
        if (this.voters[username] != null) {
          this.options[this.voters[username]].count--;
        }
        this.options[option].count++;
        return this.voters[username] = option;
      };

      Poll.prototype.hasVoted = function(username) {
        return this.voters[username] != null;
      };

      Poll.prototype.optionCount = function() {
        return Object.keys(this.options).length;
      };

      Poll.prototype.replaceOptions = function(newOptions, user) {
        var key, name, ref, results, value, vote;
        console.log("Replacing with ", newOptions);
        this.options = {};
        for (key in newOptions) {
          value = newOptions[key];
          this.addOption(value, user);
        }
        ref = this.voters;
        results = [];
        for (name in ref) {
          vote = ref[name];
          if (this.options[vote] == null) {
            results.push(delete this.voters[name]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      Poll.prototype["delete"] = function() {
        if (this.id == null) {
          throw "This poll is not registered in the database";
        }
        return db.remove({
          _id: ObjectId(this.id)
        });
      };

      Poll.deserialize = function(obj) {
        var i, j, len, len1, option, options, optionsRaw, poll, voter, voters, votersRaw;
        poll = new Poll(obj.owner, obj.name, obj.description);
        if (obj._id != null) {
          poll.id = obj._id;
        }
        optionsRaw = obj.options != null ? obj.options : [];
        votersRaw = obj.voters != null ? obj.voters : [];
        options = {};
        voters = {};
        for (i = 0, len = optionsRaw.length; i < len; i++) {
          option = optionsRaw[i];
          options[option.name] = option.details;
        }
        for (j = 0, len1 = votersRaw.length; j < len1; j++) {
          voter = votersRaw[j];
          voters[voter.name] = voter.vote;
        }
        poll.options = options;
        poll.voters = voters;
        poll.created_at = obj.created_at;
        return poll;
      };

      Poll.prototype.serialize = function() {
        var key, obj, options, value, voters;
        voters = (function() {
          var ref, results;
          ref = this.voters;
          results = [];
          for (key in ref) {
            value = ref[key];
            results.push({
              name: key,
              vote: value
            });
          }
          return results;
        }).call(this);
        options = (function() {
          var ref, results;
          ref = this.options;
          results = [];
          for (key in ref) {
            value = ref[key];
            results.push({
              name: key,
              details: value
            });
          }
          return results;
        }).call(this);
        obj = {
          owner: this.user,
          name: this.name,
          description: this.description,
          options: options,
          voters: voters,
          created_at: this.created_at || (new Date).getTime()
        };
        if (this.id != null) {
          obj._id = ObjectId(this.id);
        }
        return obj;
      };

      Poll.findOne = function(search, callback) {
        return db.findOne(search, (function(_this) {
          return function(err, poll) {
            var result;
            if (err) {
              callback(err);
            }
            result = false;
            if (poll) {
              result = _this.deserialize(poll);
            }
            return callback(null, result);
          };
        })(this));
      };

      Poll.all = function(limit, callback) {
        var cursor;
        cursor = db.find({});
        if (typeof limit === "function") {
          callback = limit;
        } else {
          cursor = cursor.limit(limit);
        }
        return cursor.toArray((function(_this) {
          return function(err, arr) {
            if (err) {
              return callback(err);
            }
            arr || (arr = []);
            return callback(null, arr.map(_this.deserialize));
          };
        })(this));
      };

      Poll.find = function(search, callback) {
        return db.find(search).toArray((function(_this) {
          return function(err, arr) {
            if (err) {
              return callback(err);
            }
            arr || (arr = []);
            return callback(null, arr.map(_this.deserialize));
          };
        })(this));
      };

      return Poll;

    })();
  };

  module.exports = instanciatePoll;

}).call(this);
