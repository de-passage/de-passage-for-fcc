// Generated by CoffeeScript 1.9.3
(function() {
  var ObjectId, instanciatePoll;

  ObjectId = require("mongodb").ObjectId;

  instanciatePoll = function(db) {
    var Poll;
    return Poll = (function() {
      function Poll(user1, name1, description, options) {
        var i, len, option;
        this.user = user1;
        this.name = name1;
        this.description = description;
        if (this.user == null) {
          throw "Not owner specified";
        }
        if (this.name == null) {
          throw "Not name specified";
        }
        if (this.description == null) {
          this.description = "";
        }
        this.options = {};
        this.voters = {};
        if (Array.isArray(options)) {
          for (i = 0, len = options.length; i < len; i++) {
            option = options[i];
            this.addOption(option, this.user);
          }
        } else if (options != null) {
          this.addOption(options, this.user);
        }
      }

      Poll.prototype.save = function(callback) {
        return db.save({
          _id: this.id ? ObjectId(this.id) : void 0,
          owner: this.user,
          name: this.name,
          description: this.description,
          options: this.options,
          voters: this.voters
        }, (function(_this) {
          return function(err, obj) {
            if (err) {
              return callback(err);
            }
            _this.id = obj._id;
            return callback(null, _this);
          };
        })(this));
      };

      Poll.prototype.addOption = function(name, user) {
        var option;
        option = {
          user: user,
          count: 0
        };
        option.description = option.description.trim();
        if (options[name]) {
          throw "An option with the name '" + name + "' already exists";
        }
        return this.options[name](option);
      };

      Poll.prototype.removeOption = function(option) {
        return this.options = this.options.filter(function(e) {
          return e.description !== option;
        });
      };

      Poll.prototype.vote = function(option, username) {
        if (this.options[option] == null) {
          throw "Option '" + option + "' does not exist";
        }
        if (this.voter[username] != null) {
          this.options[this.voter[username]].count--;
        }
        this.options[option].count++;
        return this.voter[username] = option;
      };

      Poll.prototype["delete"] = function() {
        if (this.id == null) {
          throw "This poll is not registered in the database";
        }
        return db["delete"](this.id);
      };

      Poll.findOne = function(search, callback) {
        return db.findOne(search, function(err, poll) {
          var result;
          if (err) {
            callback(err);
          }
          result = false;
          if (poll) {
            result = new Poll(poll.owner, poll.name, poll.description);
            result.id = poll._id;
            result.options = poll.options;
            result.voters = poll.voters;
          }
          return callback(null, result);
        });
      };

      return Poll;

    })();
  };

  module.exports = instanciatePoll;

}).call(this);
