// Generated by CoffeeScript 1.9.3
(function() {
  var redirectOnDBError, redirectUnlessFound, serializeUser;

  redirectOnDBError = function(err, route, req, res) {
    if (err) {
      req.flash("error", "An unexpected error has occured when calling the database: " + (JSON.stringify(err)));
      res.redirect(route);
      return true;
    } else {
      return false;
    }
  };

  redirectUnlessFound = function(poll, name, req, res) {
    if (!poll) {
      req.flash("error", "Poll '" + name + "' not found");
      res.redirect("/voting-app/polls");
      return true;
    } else {
      return false;
    }
  };

  serializeUser = function(req) {
    if (req.user) {
      return req.user.name;
    } else {
      return "anonymous:" + req.ip + ":" + req.get("User-Agent");
    }
  };

  module.exports = function(Poll) {
    return {
      show: function(req, res) {
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          var hv, u;
          if (redirectOnDBError(err, "/voting-app/polls", req, res)) {
            return;
          }
          if (redirectUnlessFound(poll, req.params.name, req, res)) {
            return;
          }
          u = serializeUser(req);
          hv = poll.hasVoted(u);
          return res.render("polls/show.pug", {
            poll: poll,
            user: req.user,
            flash: req.flash(),
            hasVoted: hv
          });
        });
      },
      create: function(req, res) {
        var borders, colors, description, key, name, options, poll, ref, value;
        ref = req.body, name = ref.name, description = ref.description, options = ref.options, colors = ref.colors, borders = ref.borders;
        if (colors == null) {
          colors = {};
        }
        if (borders == null) {
          borders = {};
        }
        if (options != null) {
          options = (function() {
            var results;
            results = [];
            for (key in options) {
              value = options[key];
              results.push({
                description: value,
                color: colors[key] || "#CCCCCC",
                border: borders[key] || "#444444"
              });
            }
            return results;
          })();
        }
        poll = new Poll(req.user.name, name, description, options);
        return poll.save(function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/polls/new", req, res)) {
            return;
          }
          return res.redirect("/voting-app/poll/" + (encodeURIComponent(poll.name)));
        });
      },
      "new": function(req, res) {
        return res.render("polls/new.pug", {
          user: req.user,
          flash: req.flash()
        });
      },
      edit: function(req, res) {
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(poll.name)), req, res)) {
            return;
          }
          if (redirectUnlessFound(poll, req.params.name, req, res)) {
            return;
          }
          return res.render("polls/edit.pug", {
            user: req.user,
            poll: poll,
            flash: req.flash()
          });
        });
      },
      index: function(req, res) {
        return Poll.all(function(err, polls) {
          if (redirectOnDBError(err, "/", req, res)) {
            return;
          }
          return res.render("polls/index.pug", {
            user: req.user,
            polls: polls,
            flash: req.flash()
          });
        });
      },
      update: function(req, res) {
        var borders, colors, description, name, options, ref, votes;
        ref = req.body, name = ref.name, description = ref.description, options = ref.options, colors = ref.colors, borders = ref.borders, votes = ref.votes;
        if (colors == null) {
          colors = {};
        }
        if (borders == null) {
          borders = {};
        }
        if (votes == null) {
          votes = {};
        }
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          var i, key, len, newOptions, option, value;
          if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(req.params.name)), req, res)) {
            return;
          }
          if ((name != null) || (description != null)) {
            if (req.user.name === poll.user) {
              if (name != null) {
                poll.name = name;
              }
              if (description != null) {
                poll.description = description;
              }
              if (options != null) {
                newOptions = {};
                for (key in options) {
                  value = options[key];
                  newOptions[key] = {
                    description: value,
                    count: votes[key] || 0,
                    color: colors[key] || "#CCCCCC",
                    border: borders[key] || "#444444"
                  };
                }
                poll.replaceOptions(newOptions, req.user.name);
              } else {
                poll.options = {};
                poll.voters = {};
              }
            } else {
              req.flash("error", "You are not authorized to perform this action");
              return res.redirect("/voting-app/poll/" + (encodeURIComponent(poll.name)));
            }
          } else if (options != null) {
            if (Array.isArray(options)) {
              for (i = 0, len = options.length; i < len; i++) {
                option = options[i];
                poll.addOption(option, req.user.name);
              }
            } else {
              poll.addOption(options, req.user.name);
            }
          }
          return poll.save(function(err, poll) {
            if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(poll.name)) + "/edit", req, res)) {
              return;
            }
            return res.redirect("/voting-app/poll/" + (encodeURIComponent(poll.name)));
          });
        });
      },
      destroy: function(req, res) {
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(req.params.name)), req, res)) {
            return;
          }
          if (redirectUnlessFound(poll, req.params.name)) {
            return;
          }
          if (poll.user !== req.user.name) {
            req.flash("error", "You are not authorized to perform this action");
            return res.redirect("/voting-app");
          }
          poll["delete"]();
          req.flash("success", "The poll '" + poll.name + "' has been deleted");
          return res.redirect("/voting-app/polls");
        });
      },
      vote: function(req, res) {
        var name, option, ref, user;
        ref = req.body, name = ref.name, option = ref.option;
        user = serializeUser(req);
        if (!((name != null) && (option != null))) {
          return res.status(400).json({
            error: "Missing body parameter name or option"
          });
        }
        return Poll.findOne({
          name: name
        }, function(err, poll) {
          var e;
          if (err) {
            return res.status(500).json(err);
          }
          if (!poll) {
            if (res.status(400).json({
              error: "Poll not found"
            })) {
              return;
            }
          }
          try {
            poll.vote(option, user);
          } catch (_error) {
            e = _error;
            return res.status(400).json({
              error: "Invalid option. " + e
            });
          }
          return poll.save(function(err, poll) {
            if (err) {
              return res.status(400).json(err);
            }
            return res.json(poll.options);
          });
        });
      }
    };
  };

}).call(this);
