// Generated by CoffeeScript 1.9.3
(function() {
  var redirectOnDBError, redirectUnlessFound;

  redirectOnDBError = function(err, route) {
    if (err) {
      flash("error", "An unexpected error has occured when calling the database: " + (JSON.stringify(err)));
      redirect(route);
      return true;
    } else {
      return false;
    }
  };

  redirectUnlessFound = function(poll, name) {
    if (!poll) {
      flash("error", "Poll '" + name + "' not found");
      redirect("/voting-app/polls");
      return true;
    } else {
      return false;
    }
  };

  module.exports = function(Poll) {
    return {
      show: function(req, res) {
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/polls")) {
            return;
          }
          if (redirectUnlessFound(poll, req.params.name)) {
            return;
          }
          return res.render("polls/show.pug", {
            poll: poll,
            user: req.user,
            flash: req.flash()
          });
        });
      },
      create: function(req, res) {
        var description, name, options, poll, ref;
        ref = req.body, name = ref.name, description = ref.description, options = ref.options;
        if (options != null) {
          options = Array.slice.call(options);
        }
        poll = new Poll(req.user.name, name, description, options);
        return poll.save(function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/polls/new")) {
            return;
          }
          return res.redirect("/voting-app/poll/" + (encodeURIComponent(poll.name)));
        });
      },
      "new": function(req, res) {
        return res.render("polls/new.pug", {
          user: req.user,
          flash: req.flash()
        });
      },
      edit: function(req, res) {
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(poll.name)))) {
            return;
          }
          if (redirectUnlessFound(poll, req.params.name)) {
            return;
          }
          return res.render("polls/edit.pug", {
            user: req.user,
            poll: poll,
            flash: req.flash()
          });
        });
      },
      index: function(req, res) {
        return Poll.all(function(err, polls) {
          if (redirectOnDBError(err, "/")) {
            return;
          }
          return res.render("polls/index.pug", {
            user: req.user,
            polls: polls,
            flash: req.flash()
          });
        });
      },
      update: function(req, res) {
        var description, name, options, ref;
        ref = req.body, name = ref.name, description = ref.description, options = ref.options;
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(req.params.name)))) {
            return;
          }
          return poll.save(function(err, poll) {
            if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(poll.name)) + "/edit")) {
              return;
            }
            req.flash("success", "The poll '" + poll.name + "' has been updated");
            return res.redirect("/voting-app/poll/" + (encodeURIComponent(poll.name)));
          });
        });
      },
      destroy: function(req, res) {
        return Poll.findOne({
          name: req.params.name
        }, function(err, poll) {
          if (redirectOnDBError(err, "/voting-app/poll/" + (encodeURIComponent(req.params.name)))) {
            return;
          }
          if (redirectUnlessFound(poll, req.params.name)) {
            return;
          }
          if (poll.user !== req.user.name) {
            req.flash("error", "You are not authorized to perform this action");
            return res.redirect("/voting-app");
          }
          poll["delete"]();
          req.flash("success", "The poll '" + poll.name + "' has been deleted");
          return res.redirect("/voting-app/polls");
        });
      }
    };
  };

}).call(this);
